/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: datasource.proto */

#ifndef PROTOBUF_C_datasource_2eproto__INCLUDED
#define PROTOBUF_C_datasource_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "kismet.pb-c.h"

typedef struct KismetDatasource__SubChannels KismetDatasource__SubChannels;
typedef struct KismetDatasource__SubChanset KismetDatasource__SubChanset;
typedef struct KismetDatasource__SubChanhop KismetDatasource__SubChanhop;
typedef struct KismetDatasource__SubGps KismetDatasource__SubGps;
typedef struct KismetDatasource__SubInterface KismetDatasource__SubInterface;
typedef struct KismetDatasource__SubPacket KismetDatasource__SubPacket;
typedef struct KismetDatasource__SubJson KismetDatasource__SubJson;
typedef struct KismetDatasource__SubBuffer KismetDatasource__SubBuffer;
typedef struct KismetDatasource__SubSignal KismetDatasource__SubSignal;
typedef struct KismetDatasource__SubSpecset KismetDatasource__SubSpecset;
typedef struct KismetDatasource__SubSpectrum KismetDatasource__SubSpectrum;
typedef struct KismetDatasource__SubSuccess KismetDatasource__SubSuccess;
typedef struct KismetDatasource__CloseDatasource KismetDatasource__CloseDatasource;
typedef struct KismetDatasource__Configure KismetDatasource__Configure;
typedef struct KismetDatasource__ConfigureReport KismetDatasource__ConfigureReport;
typedef struct KismetDatasource__DataReport KismetDatasource__DataReport;
typedef struct KismetDatasource__ErrorReport KismetDatasource__ErrorReport;
typedef struct KismetDatasource__ListInterfaces KismetDatasource__ListInterfaces;
typedef struct KismetDatasource__InterfacesReport KismetDatasource__InterfacesReport;
typedef struct KismetDatasource__NewSource KismetDatasource__NewSource;
typedef struct KismetDatasource__OpenSource KismetDatasource__OpenSource;
typedef struct KismetDatasource__OpenSourceReport KismetDatasource__OpenSourceReport;
typedef struct KismetDatasource__ProbeSource KismetDatasource__ProbeSource;
typedef struct KismetDatasource__ProbeSourceReport KismetDatasource__ProbeSourceReport;
typedef struct KismetDatasource__WarningReport KismetDatasource__WarningReport;


/* --- enums --- */


/* --- messages --- */

/*
 * Multiple channels
 */
struct  KismetDatasource__SubChannels
{
  ProtobufCMessage base;
  size_t n_channels;
  char **channels;
};
#define KISMET_DATASOURCE__SUB_CHANNELS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_datasource__sub_channels__descriptor) \
, 0,NULL }


/*
 * Single channel
 */
struct  KismetDatasource__SubChanset
{
  ProtobufCMessage base;
  char *channel;
};
#define KISMET_DATASOURCE__SUB_CHANSET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_datasource__sub_chanset__descriptor) \
, NULL }


/*
 * Channel hop commands
 */
struct  KismetDatasource__SubChanhop
{
  ProtobufCMessage base;
  /*
   * Channels to hop over
   */
  size_t n_channels;
  char **channels;
  /*
   * Hop rate
   */
  protobuf_c_boolean has_rate;
  double rate;
  /*
   * Shuffle
   */
  protobuf_c_boolean has_shuffle;
  protobuf_c_boolean shuffle;
  /*
   * Skip interval per shuffle
   */
  protobuf_c_boolean has_shuffle_skip;
  uint32_t shuffle_skip;
  /*
   * Offset for multiple devices on the same band
   */
  protobuf_c_boolean has_offset;
  uint32_t offset;
};
#define KISMET_DATASOURCE__SUB_CHANHOP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_datasource__sub_chanhop__descriptor) \
, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * GPS data
 */
struct  KismetDatasource__SubGps
{
  ProtobufCMessage base;
  double lat;
  double lon;
  double alt;
  double speed;
  double heading;
  double precision;
  uint32_t fix;
  uint64_t time_sec;
  uint64_t time_usec;
  char *type;
  char *name;
  protobuf_c_boolean has_high_prec_time;
  double high_prec_time;
};
#define KISMET_DATASOURCE__SUB_GPS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_datasource__sub_gps__descriptor) \
, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, NULL, 0, 0 }


/*
 * Possible interface
 */
struct  KismetDatasource__SubInterface
{
  ProtobufCMessage base;
  char *interface;
  char *flags;
  char *hardware;
  /*
   * Capture interface mapped below the virtual interface name, ie rtlXYZ-N or wlan0mon
   */
  char *capinterface;
};
#define KISMET_DATASOURCE__SUB_INTERFACE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_datasource__sub_interface__descriptor) \
, NULL, NULL, NULL, NULL }


/*
 * Packetized data
 */
struct  KismetDatasource__SubPacket
{
  ProtobufCMessage base;
  uint64_t time_sec;
  uint64_t time_usec;
  uint32_t dlt;
  uint64_t size;
  ProtobufCBinaryData data;
  protobuf_c_boolean has_cap_size;
  uint64_t cap_size;
};
#define KISMET_DATASOURCE__SUB_PACKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_datasource__sub_packet__descriptor) \
, 0, 0, 0, 0, {0,NULL}, 0, 0 }


struct  KismetDatasource__SubJson
{
  ProtobufCMessage base;
  uint64_t time_sec;
  uint64_t time_usec;
  char *type;
  char *json;
};
#define KISMET_DATASOURCE__SUB_JSON__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_datasource__sub_json__descriptor) \
, 0, 0, NULL, NULL }


struct  KismetDatasource__SubBuffer
{
  ProtobufCMessage base;
  uint64_t time_sec;
  uint64_t time_usec;
  char *type;
  ProtobufCBinaryData buffer;
};
#define KISMET_DATASOURCE__SUB_BUFFER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_datasource__sub_buffer__descriptor) \
, 0, 0, NULL, {0,NULL} }


/*
 * Signal metadata
 */
struct  KismetDatasource__SubSignal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_signal_dbm;
  double signal_dbm;
  protobuf_c_boolean has_noise_dbm;
  double noise_dbm;
  protobuf_c_boolean has_signal_rssi;
  double signal_rssi;
  protobuf_c_boolean has_noise_rssi;
  double noise_rssi;
  protobuf_c_boolean has_freq_khz;
  double freq_khz;
  char *channel;
  protobuf_c_boolean has_datarate;
  double datarate;
};
#define KISMET_DATASOURCE__SUB_SIGNAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_datasource__sub_signal__descriptor) \
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, 0, 0 }


/*
 * Spectrum configuration
 */
struct  KismetDatasource__SubSpecset
{
  ProtobufCMessage base;
  protobuf_c_boolean has_start_mhz;
  double start_mhz;
  protobuf_c_boolean has_end_mhz;
  double end_mhz;
  protobuf_c_boolean has_samples_per_bucket;
  double samples_per_bucket;
  protobuf_c_boolean has_bucket_width_hz;
  double bucket_width_hz;
  protobuf_c_boolean has_enable_amp;
  protobuf_c_boolean enable_amp;
  protobuf_c_boolean has_if_amp;
  uint64_t if_amp;
  protobuf_c_boolean has_baseband_amp;
  uint64_t baseband_amp;
};
#define KISMET_DATASOURCE__SUB_SPECSET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_datasource__sub_specset__descriptor) \
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * Spectrum report
 */
struct  KismetDatasource__SubSpectrum
{
  ProtobufCMessage base;
  protobuf_c_boolean has_time_sec;
  uint64_t time_sec;
  protobuf_c_boolean has_time_usec;
  uint64_t time_usec;
  protobuf_c_boolean has_start_mhz;
  double start_mhz;
  protobuf_c_boolean has_end_mhz;
  double end_mhz;
  protobuf_c_boolean has_bucket_width_hz;
  double bucket_width_hz;
  size_t n_data;
  int32_t *data;
};
#define KISMET_DATASOURCE__SUB_SPECTRUM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_datasource__sub_spectrum__descriptor) \
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL }


/*
 * Command success
 */
struct  KismetDatasource__SubSuccess
{
  ProtobufCMessage base;
  protobuf_c_boolean success;
  uint32_t seqno;
};
#define KISMET_DATASOURCE__SUB_SUCCESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_datasource__sub_success__descriptor) \
, 0, 0 }


/*
 * Close open device (Kismet->Driver)
 * KDSCLOSEDATASOURCE
 */
struct  KismetDatasource__CloseDatasource
{
  ProtobufCMessage base;
};
#define KISMET_DATASOURCE__CLOSE_DATASOURCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_datasource__close_datasource__descriptor) \
 }


/*
 * Configure source behavior (Kismet->Driver)
 * KDSCONFIGURE
 */
struct  KismetDatasource__Configure
{
  ProtobufCMessage base;
  KismetDatasource__SubChanset *channel;
  KismetDatasource__SubChanhop *hopping;
  KismetDatasource__SubSpecset *spectrum;
};
#define KISMET_DATASOURCE__CONFIGURE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_datasource__configure__descriptor) \
, NULL, NULL, NULL }


/*
 * Configuration update (Driver->Kismet)
 * KDSCONFIGUREREORT
 */
struct  KismetDatasource__ConfigureReport
{
  ProtobufCMessage base;
  KismetDatasource__SubSuccess *success;
  KismetDatasource__SubChanset *channel;
  KismetDatasource__SubChanhop *hopping;
  KismetExternal__MsgbusMessage *message;
  char *warning;
};
#define KISMET_DATASOURCE__CONFIGURE_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_datasource__configure_report__descriptor) \
, NULL, NULL, NULL, NULL, NULL }


/*
 * Packet payload (Driver->Kismet)
 */
struct  KismetDatasource__DataReport
{
  ProtobufCMessage base;
  KismetDatasource__SubGps *gps;
  KismetExternal__MsgbusMessage *message;
  KismetDatasource__SubPacket *packet;
  KismetDatasource__SubSignal *signal;
  KismetDatasource__SubSpectrum *spectrum;
  char *warning;
  KismetDatasource__SubJson *json;
  KismetDatasource__SubBuffer *buffer;
  protobuf_c_boolean has_high_prec_time;
  double high_prec_time;
};
#define KISMET_DATASOURCE__DATA_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_datasource__data_report__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0 }


/*
 * Fatal error (Driver->Kismet)
 * KDSERRORREPORT
 */
struct  KismetDatasource__ErrorReport
{
  ProtobufCMessage base;
  KismetDatasource__SubSuccess *success;
  KismetExternal__MsgbusMessage *message;
};
#define KISMET_DATASOURCE__ERROR_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_datasource__error_report__descriptor) \
, NULL, NULL }


/*
 * Request interface list (Kismet->Driver)
 */
struct  KismetDatasource__ListInterfaces
{
  ProtobufCMessage base;
};
#define KISMET_DATASOURCE__LIST_INTERFACES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_datasource__list_interfaces__descriptor) \
 }


/*
 * Interface list (Driver->Kismet)
 * KDSINTERFACESREPORT
 */
struct  KismetDatasource__InterfacesReport
{
  ProtobufCMessage base;
  KismetDatasource__SubSuccess *success;
  KismetExternal__MsgbusMessage *message;
  size_t n_interfaces;
  KismetDatasource__SubInterface **interfaces;
};
#define KISMET_DATASOURCE__INTERFACES_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_datasource__interfaces_report__descriptor) \
, NULL, NULL, 0,NULL }


/*
 * Initiate a new datasource on a remote connection (Driver->Kismet)
 * KDSNEWSOURCE
 */
struct  KismetDatasource__NewSource
{
  ProtobufCMessage base;
  char *definition;
  char *sourcetype;
  char *uuid;
};
#define KISMET_DATASOURCE__NEW_SOURCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_datasource__new_source__descriptor) \
, NULL, NULL, NULL }


/*
 * Initiate opening an interface (Kismet->Driver)
 * KDSOPENSOURCE
 */
struct  KismetDatasource__OpenSource
{
  ProtobufCMessage base;
  char *definition;
};
#define KISMET_DATASOURCE__OPEN_SOURCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_datasource__open_source__descriptor) \
, NULL }


/*
 * Report success of opening a source, and all source data (Driver->Kismet)
 * KDSOPENSOURCEREPORT
 */
struct  KismetDatasource__OpenSourceReport
{
  ProtobufCMessage base;
  KismetDatasource__SubSuccess *success;
  protobuf_c_boolean has_dlt;
  uint32_t dlt;
  char *capture_interface;
  KismetDatasource__SubChannels *channels;
  KismetDatasource__SubChanset *channel;
  KismetDatasource__SubChanhop *hop_config;
  char *hardware;
  KismetExternal__MsgbusMessage *message;
  KismetDatasource__SubSpecset *spectrum;
  char *uuid;
  char *warning;
};
#define KISMET_DATASOURCE__OPEN_SOURCE_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_datasource__open_source_report__descriptor) \
, NULL, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * Query if a driver can handle a definition (Kismet->Driver)
 * KDSPROBESOURCE
 */
struct  KismetDatasource__ProbeSource
{
  ProtobufCMessage base;
  char *definition;
};
#define KISMET_DATASOURCE__PROBE_SOURCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_datasource__probe_source__descriptor) \
, NULL }


/*
 * Respond to a probe (Driver->Kismet)
 * KDSPROBESOURCEREPORT
 */
struct  KismetDatasource__ProbeSourceReport
{
  ProtobufCMessage base;
  KismetDatasource__SubSuccess *success;
  KismetExternal__MsgbusMessage *message;
  KismetDatasource__SubChannels *channels;
  KismetDatasource__SubChanset *channel;
  KismetDatasource__SubSpecset *spectrum;
  char *hardware;
};
#define KISMET_DATASOURCE__PROBE_SOURCE_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_datasource__probe_source_report__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * Non-fatal warning (Driver->Kismet)
 * KDSWARNINGREPORT
 */
struct  KismetDatasource__WarningReport
{
  ProtobufCMessage base;
  char *warning;
};
#define KISMET_DATASOURCE__WARNING_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kismet_datasource__warning_report__descriptor) \
, NULL }


/* KismetDatasource__SubChannels methods */
void   kismet_datasource__sub_channels__init
                     (KismetDatasource__SubChannels         *message);
size_t kismet_datasource__sub_channels__get_packed_size
                     (const KismetDatasource__SubChannels   *message);
size_t kismet_datasource__sub_channels__pack
                     (const KismetDatasource__SubChannels   *message,
                      uint8_t             *out);
size_t kismet_datasource__sub_channels__pack_to_buffer
                     (const KismetDatasource__SubChannels   *message,
                      ProtobufCBuffer     *buffer);
KismetDatasource__SubChannels *
       kismet_datasource__sub_channels__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_datasource__sub_channels__free_unpacked
                     (KismetDatasource__SubChannels *message,
                      ProtobufCAllocator *allocator);
/* KismetDatasource__SubChanset methods */
void   kismet_datasource__sub_chanset__init
                     (KismetDatasource__SubChanset         *message);
size_t kismet_datasource__sub_chanset__get_packed_size
                     (const KismetDatasource__SubChanset   *message);
size_t kismet_datasource__sub_chanset__pack
                     (const KismetDatasource__SubChanset   *message,
                      uint8_t             *out);
size_t kismet_datasource__sub_chanset__pack_to_buffer
                     (const KismetDatasource__SubChanset   *message,
                      ProtobufCBuffer     *buffer);
KismetDatasource__SubChanset *
       kismet_datasource__sub_chanset__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_datasource__sub_chanset__free_unpacked
                     (KismetDatasource__SubChanset *message,
                      ProtobufCAllocator *allocator);
/* KismetDatasource__SubChanhop methods */
void   kismet_datasource__sub_chanhop__init
                     (KismetDatasource__SubChanhop         *message);
size_t kismet_datasource__sub_chanhop__get_packed_size
                     (const KismetDatasource__SubChanhop   *message);
size_t kismet_datasource__sub_chanhop__pack
                     (const KismetDatasource__SubChanhop   *message,
                      uint8_t             *out);
size_t kismet_datasource__sub_chanhop__pack_to_buffer
                     (const KismetDatasource__SubChanhop   *message,
                      ProtobufCBuffer     *buffer);
KismetDatasource__SubChanhop *
       kismet_datasource__sub_chanhop__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_datasource__sub_chanhop__free_unpacked
                     (KismetDatasource__SubChanhop *message,
                      ProtobufCAllocator *allocator);
/* KismetDatasource__SubGps methods */
void   kismet_datasource__sub_gps__init
                     (KismetDatasource__SubGps         *message);
size_t kismet_datasource__sub_gps__get_packed_size
                     (const KismetDatasource__SubGps   *message);
size_t kismet_datasource__sub_gps__pack
                     (const KismetDatasource__SubGps   *message,
                      uint8_t             *out);
size_t kismet_datasource__sub_gps__pack_to_buffer
                     (const KismetDatasource__SubGps   *message,
                      ProtobufCBuffer     *buffer);
KismetDatasource__SubGps *
       kismet_datasource__sub_gps__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_datasource__sub_gps__free_unpacked
                     (KismetDatasource__SubGps *message,
                      ProtobufCAllocator *allocator);
/* KismetDatasource__SubInterface methods */
void   kismet_datasource__sub_interface__init
                     (KismetDatasource__SubInterface         *message);
size_t kismet_datasource__sub_interface__get_packed_size
                     (const KismetDatasource__SubInterface   *message);
size_t kismet_datasource__sub_interface__pack
                     (const KismetDatasource__SubInterface   *message,
                      uint8_t             *out);
size_t kismet_datasource__sub_interface__pack_to_buffer
                     (const KismetDatasource__SubInterface   *message,
                      ProtobufCBuffer     *buffer);
KismetDatasource__SubInterface *
       kismet_datasource__sub_interface__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_datasource__sub_interface__free_unpacked
                     (KismetDatasource__SubInterface *message,
                      ProtobufCAllocator *allocator);
/* KismetDatasource__SubPacket methods */
void   kismet_datasource__sub_packet__init
                     (KismetDatasource__SubPacket         *message);
size_t kismet_datasource__sub_packet__get_packed_size
                     (const KismetDatasource__SubPacket   *message);
size_t kismet_datasource__sub_packet__pack
                     (const KismetDatasource__SubPacket   *message,
                      uint8_t             *out);
size_t kismet_datasource__sub_packet__pack_to_buffer
                     (const KismetDatasource__SubPacket   *message,
                      ProtobufCBuffer     *buffer);
KismetDatasource__SubPacket *
       kismet_datasource__sub_packet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_datasource__sub_packet__free_unpacked
                     (KismetDatasource__SubPacket *message,
                      ProtobufCAllocator *allocator);
/* KismetDatasource__SubJson methods */
void   kismet_datasource__sub_json__init
                     (KismetDatasource__SubJson         *message);
size_t kismet_datasource__sub_json__get_packed_size
                     (const KismetDatasource__SubJson   *message);
size_t kismet_datasource__sub_json__pack
                     (const KismetDatasource__SubJson   *message,
                      uint8_t             *out);
size_t kismet_datasource__sub_json__pack_to_buffer
                     (const KismetDatasource__SubJson   *message,
                      ProtobufCBuffer     *buffer);
KismetDatasource__SubJson *
       kismet_datasource__sub_json__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_datasource__sub_json__free_unpacked
                     (KismetDatasource__SubJson *message,
                      ProtobufCAllocator *allocator);
/* KismetDatasource__SubBuffer methods */
void   kismet_datasource__sub_buffer__init
                     (KismetDatasource__SubBuffer         *message);
size_t kismet_datasource__sub_buffer__get_packed_size
                     (const KismetDatasource__SubBuffer   *message);
size_t kismet_datasource__sub_buffer__pack
                     (const KismetDatasource__SubBuffer   *message,
                      uint8_t             *out);
size_t kismet_datasource__sub_buffer__pack_to_buffer
                     (const KismetDatasource__SubBuffer   *message,
                      ProtobufCBuffer     *buffer);
KismetDatasource__SubBuffer *
       kismet_datasource__sub_buffer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_datasource__sub_buffer__free_unpacked
                     (KismetDatasource__SubBuffer *message,
                      ProtobufCAllocator *allocator);
/* KismetDatasource__SubSignal methods */
void   kismet_datasource__sub_signal__init
                     (KismetDatasource__SubSignal         *message);
size_t kismet_datasource__sub_signal__get_packed_size
                     (const KismetDatasource__SubSignal   *message);
size_t kismet_datasource__sub_signal__pack
                     (const KismetDatasource__SubSignal   *message,
                      uint8_t             *out);
size_t kismet_datasource__sub_signal__pack_to_buffer
                     (const KismetDatasource__SubSignal   *message,
                      ProtobufCBuffer     *buffer);
KismetDatasource__SubSignal *
       kismet_datasource__sub_signal__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_datasource__sub_signal__free_unpacked
                     (KismetDatasource__SubSignal *message,
                      ProtobufCAllocator *allocator);
/* KismetDatasource__SubSpecset methods */
void   kismet_datasource__sub_specset__init
                     (KismetDatasource__SubSpecset         *message);
size_t kismet_datasource__sub_specset__get_packed_size
                     (const KismetDatasource__SubSpecset   *message);
size_t kismet_datasource__sub_specset__pack
                     (const KismetDatasource__SubSpecset   *message,
                      uint8_t             *out);
size_t kismet_datasource__sub_specset__pack_to_buffer
                     (const KismetDatasource__SubSpecset   *message,
                      ProtobufCBuffer     *buffer);
KismetDatasource__SubSpecset *
       kismet_datasource__sub_specset__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_datasource__sub_specset__free_unpacked
                     (KismetDatasource__SubSpecset *message,
                      ProtobufCAllocator *allocator);
/* KismetDatasource__SubSpectrum methods */
void   kismet_datasource__sub_spectrum__init
                     (KismetDatasource__SubSpectrum         *message);
size_t kismet_datasource__sub_spectrum__get_packed_size
                     (const KismetDatasource__SubSpectrum   *message);
size_t kismet_datasource__sub_spectrum__pack
                     (const KismetDatasource__SubSpectrum   *message,
                      uint8_t             *out);
size_t kismet_datasource__sub_spectrum__pack_to_buffer
                     (const KismetDatasource__SubSpectrum   *message,
                      ProtobufCBuffer     *buffer);
KismetDatasource__SubSpectrum *
       kismet_datasource__sub_spectrum__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_datasource__sub_spectrum__free_unpacked
                     (KismetDatasource__SubSpectrum *message,
                      ProtobufCAllocator *allocator);
/* KismetDatasource__SubSuccess methods */
void   kismet_datasource__sub_success__init
                     (KismetDatasource__SubSuccess         *message);
size_t kismet_datasource__sub_success__get_packed_size
                     (const KismetDatasource__SubSuccess   *message);
size_t kismet_datasource__sub_success__pack
                     (const KismetDatasource__SubSuccess   *message,
                      uint8_t             *out);
size_t kismet_datasource__sub_success__pack_to_buffer
                     (const KismetDatasource__SubSuccess   *message,
                      ProtobufCBuffer     *buffer);
KismetDatasource__SubSuccess *
       kismet_datasource__sub_success__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_datasource__sub_success__free_unpacked
                     (KismetDatasource__SubSuccess *message,
                      ProtobufCAllocator *allocator);
/* KismetDatasource__CloseDatasource methods */
void   kismet_datasource__close_datasource__init
                     (KismetDatasource__CloseDatasource         *message);
size_t kismet_datasource__close_datasource__get_packed_size
                     (const KismetDatasource__CloseDatasource   *message);
size_t kismet_datasource__close_datasource__pack
                     (const KismetDatasource__CloseDatasource   *message,
                      uint8_t             *out);
size_t kismet_datasource__close_datasource__pack_to_buffer
                     (const KismetDatasource__CloseDatasource   *message,
                      ProtobufCBuffer     *buffer);
KismetDatasource__CloseDatasource *
       kismet_datasource__close_datasource__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_datasource__close_datasource__free_unpacked
                     (KismetDatasource__CloseDatasource *message,
                      ProtobufCAllocator *allocator);
/* KismetDatasource__Configure methods */
void   kismet_datasource__configure__init
                     (KismetDatasource__Configure         *message);
size_t kismet_datasource__configure__get_packed_size
                     (const KismetDatasource__Configure   *message);
size_t kismet_datasource__configure__pack
                     (const KismetDatasource__Configure   *message,
                      uint8_t             *out);
size_t kismet_datasource__configure__pack_to_buffer
                     (const KismetDatasource__Configure   *message,
                      ProtobufCBuffer     *buffer);
KismetDatasource__Configure *
       kismet_datasource__configure__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_datasource__configure__free_unpacked
                     (KismetDatasource__Configure *message,
                      ProtobufCAllocator *allocator);
/* KismetDatasource__ConfigureReport methods */
void   kismet_datasource__configure_report__init
                     (KismetDatasource__ConfigureReport         *message);
size_t kismet_datasource__configure_report__get_packed_size
                     (const KismetDatasource__ConfigureReport   *message);
size_t kismet_datasource__configure_report__pack
                     (const KismetDatasource__ConfigureReport   *message,
                      uint8_t             *out);
size_t kismet_datasource__configure_report__pack_to_buffer
                     (const KismetDatasource__ConfigureReport   *message,
                      ProtobufCBuffer     *buffer);
KismetDatasource__ConfigureReport *
       kismet_datasource__configure_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_datasource__configure_report__free_unpacked
                     (KismetDatasource__ConfigureReport *message,
                      ProtobufCAllocator *allocator);
/* KismetDatasource__DataReport methods */
void   kismet_datasource__data_report__init
                     (KismetDatasource__DataReport         *message);
size_t kismet_datasource__data_report__get_packed_size
                     (const KismetDatasource__DataReport   *message);
size_t kismet_datasource__data_report__pack
                     (const KismetDatasource__DataReport   *message,
                      uint8_t             *out);
size_t kismet_datasource__data_report__pack_to_buffer
                     (const KismetDatasource__DataReport   *message,
                      ProtobufCBuffer     *buffer);
KismetDatasource__DataReport *
       kismet_datasource__data_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_datasource__data_report__free_unpacked
                     (KismetDatasource__DataReport *message,
                      ProtobufCAllocator *allocator);
/* KismetDatasource__ErrorReport methods */
void   kismet_datasource__error_report__init
                     (KismetDatasource__ErrorReport         *message);
size_t kismet_datasource__error_report__get_packed_size
                     (const KismetDatasource__ErrorReport   *message);
size_t kismet_datasource__error_report__pack
                     (const KismetDatasource__ErrorReport   *message,
                      uint8_t             *out);
size_t kismet_datasource__error_report__pack_to_buffer
                     (const KismetDatasource__ErrorReport   *message,
                      ProtobufCBuffer     *buffer);
KismetDatasource__ErrorReport *
       kismet_datasource__error_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_datasource__error_report__free_unpacked
                     (KismetDatasource__ErrorReport *message,
                      ProtobufCAllocator *allocator);
/* KismetDatasource__ListInterfaces methods */
void   kismet_datasource__list_interfaces__init
                     (KismetDatasource__ListInterfaces         *message);
size_t kismet_datasource__list_interfaces__get_packed_size
                     (const KismetDatasource__ListInterfaces   *message);
size_t kismet_datasource__list_interfaces__pack
                     (const KismetDatasource__ListInterfaces   *message,
                      uint8_t             *out);
size_t kismet_datasource__list_interfaces__pack_to_buffer
                     (const KismetDatasource__ListInterfaces   *message,
                      ProtobufCBuffer     *buffer);
KismetDatasource__ListInterfaces *
       kismet_datasource__list_interfaces__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_datasource__list_interfaces__free_unpacked
                     (KismetDatasource__ListInterfaces *message,
                      ProtobufCAllocator *allocator);
/* KismetDatasource__InterfacesReport methods */
void   kismet_datasource__interfaces_report__init
                     (KismetDatasource__InterfacesReport         *message);
size_t kismet_datasource__interfaces_report__get_packed_size
                     (const KismetDatasource__InterfacesReport   *message);
size_t kismet_datasource__interfaces_report__pack
                     (const KismetDatasource__InterfacesReport   *message,
                      uint8_t             *out);
size_t kismet_datasource__interfaces_report__pack_to_buffer
                     (const KismetDatasource__InterfacesReport   *message,
                      ProtobufCBuffer     *buffer);
KismetDatasource__InterfacesReport *
       kismet_datasource__interfaces_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_datasource__interfaces_report__free_unpacked
                     (KismetDatasource__InterfacesReport *message,
                      ProtobufCAllocator *allocator);
/* KismetDatasource__NewSource methods */
void   kismet_datasource__new_source__init
                     (KismetDatasource__NewSource         *message);
size_t kismet_datasource__new_source__get_packed_size
                     (const KismetDatasource__NewSource   *message);
size_t kismet_datasource__new_source__pack
                     (const KismetDatasource__NewSource   *message,
                      uint8_t             *out);
size_t kismet_datasource__new_source__pack_to_buffer
                     (const KismetDatasource__NewSource   *message,
                      ProtobufCBuffer     *buffer);
KismetDatasource__NewSource *
       kismet_datasource__new_source__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_datasource__new_source__free_unpacked
                     (KismetDatasource__NewSource *message,
                      ProtobufCAllocator *allocator);
/* KismetDatasource__OpenSource methods */
void   kismet_datasource__open_source__init
                     (KismetDatasource__OpenSource         *message);
size_t kismet_datasource__open_source__get_packed_size
                     (const KismetDatasource__OpenSource   *message);
size_t kismet_datasource__open_source__pack
                     (const KismetDatasource__OpenSource   *message,
                      uint8_t             *out);
size_t kismet_datasource__open_source__pack_to_buffer
                     (const KismetDatasource__OpenSource   *message,
                      ProtobufCBuffer     *buffer);
KismetDatasource__OpenSource *
       kismet_datasource__open_source__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_datasource__open_source__free_unpacked
                     (KismetDatasource__OpenSource *message,
                      ProtobufCAllocator *allocator);
/* KismetDatasource__OpenSourceReport methods */
void   kismet_datasource__open_source_report__init
                     (KismetDatasource__OpenSourceReport         *message);
size_t kismet_datasource__open_source_report__get_packed_size
                     (const KismetDatasource__OpenSourceReport   *message);
size_t kismet_datasource__open_source_report__pack
                     (const KismetDatasource__OpenSourceReport   *message,
                      uint8_t             *out);
size_t kismet_datasource__open_source_report__pack_to_buffer
                     (const KismetDatasource__OpenSourceReport   *message,
                      ProtobufCBuffer     *buffer);
KismetDatasource__OpenSourceReport *
       kismet_datasource__open_source_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_datasource__open_source_report__free_unpacked
                     (KismetDatasource__OpenSourceReport *message,
                      ProtobufCAllocator *allocator);
/* KismetDatasource__ProbeSource methods */
void   kismet_datasource__probe_source__init
                     (KismetDatasource__ProbeSource         *message);
size_t kismet_datasource__probe_source__get_packed_size
                     (const KismetDatasource__ProbeSource   *message);
size_t kismet_datasource__probe_source__pack
                     (const KismetDatasource__ProbeSource   *message,
                      uint8_t             *out);
size_t kismet_datasource__probe_source__pack_to_buffer
                     (const KismetDatasource__ProbeSource   *message,
                      ProtobufCBuffer     *buffer);
KismetDatasource__ProbeSource *
       kismet_datasource__probe_source__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_datasource__probe_source__free_unpacked
                     (KismetDatasource__ProbeSource *message,
                      ProtobufCAllocator *allocator);
/* KismetDatasource__ProbeSourceReport methods */
void   kismet_datasource__probe_source_report__init
                     (KismetDatasource__ProbeSourceReport         *message);
size_t kismet_datasource__probe_source_report__get_packed_size
                     (const KismetDatasource__ProbeSourceReport   *message);
size_t kismet_datasource__probe_source_report__pack
                     (const KismetDatasource__ProbeSourceReport   *message,
                      uint8_t             *out);
size_t kismet_datasource__probe_source_report__pack_to_buffer
                     (const KismetDatasource__ProbeSourceReport   *message,
                      ProtobufCBuffer     *buffer);
KismetDatasource__ProbeSourceReport *
       kismet_datasource__probe_source_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_datasource__probe_source_report__free_unpacked
                     (KismetDatasource__ProbeSourceReport *message,
                      ProtobufCAllocator *allocator);
/* KismetDatasource__WarningReport methods */
void   kismet_datasource__warning_report__init
                     (KismetDatasource__WarningReport         *message);
size_t kismet_datasource__warning_report__get_packed_size
                     (const KismetDatasource__WarningReport   *message);
size_t kismet_datasource__warning_report__pack
                     (const KismetDatasource__WarningReport   *message,
                      uint8_t             *out);
size_t kismet_datasource__warning_report__pack_to_buffer
                     (const KismetDatasource__WarningReport   *message,
                      ProtobufCBuffer     *buffer);
KismetDatasource__WarningReport *
       kismet_datasource__warning_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kismet_datasource__warning_report__free_unpacked
                     (KismetDatasource__WarningReport *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*KismetDatasource__SubChannels_Closure)
                 (const KismetDatasource__SubChannels *message,
                  void *closure_data);
typedef void (*KismetDatasource__SubChanset_Closure)
                 (const KismetDatasource__SubChanset *message,
                  void *closure_data);
typedef void (*KismetDatasource__SubChanhop_Closure)
                 (const KismetDatasource__SubChanhop *message,
                  void *closure_data);
typedef void (*KismetDatasource__SubGps_Closure)
                 (const KismetDatasource__SubGps *message,
                  void *closure_data);
typedef void (*KismetDatasource__SubInterface_Closure)
                 (const KismetDatasource__SubInterface *message,
                  void *closure_data);
typedef void (*KismetDatasource__SubPacket_Closure)
                 (const KismetDatasource__SubPacket *message,
                  void *closure_data);
typedef void (*KismetDatasource__SubJson_Closure)
                 (const KismetDatasource__SubJson *message,
                  void *closure_data);
typedef void (*KismetDatasource__SubBuffer_Closure)
                 (const KismetDatasource__SubBuffer *message,
                  void *closure_data);
typedef void (*KismetDatasource__SubSignal_Closure)
                 (const KismetDatasource__SubSignal *message,
                  void *closure_data);
typedef void (*KismetDatasource__SubSpecset_Closure)
                 (const KismetDatasource__SubSpecset *message,
                  void *closure_data);
typedef void (*KismetDatasource__SubSpectrum_Closure)
                 (const KismetDatasource__SubSpectrum *message,
                  void *closure_data);
typedef void (*KismetDatasource__SubSuccess_Closure)
                 (const KismetDatasource__SubSuccess *message,
                  void *closure_data);
typedef void (*KismetDatasource__CloseDatasource_Closure)
                 (const KismetDatasource__CloseDatasource *message,
                  void *closure_data);
typedef void (*KismetDatasource__Configure_Closure)
                 (const KismetDatasource__Configure *message,
                  void *closure_data);
typedef void (*KismetDatasource__ConfigureReport_Closure)
                 (const KismetDatasource__ConfigureReport *message,
                  void *closure_data);
typedef void (*KismetDatasource__DataReport_Closure)
                 (const KismetDatasource__DataReport *message,
                  void *closure_data);
typedef void (*KismetDatasource__ErrorReport_Closure)
                 (const KismetDatasource__ErrorReport *message,
                  void *closure_data);
typedef void (*KismetDatasource__ListInterfaces_Closure)
                 (const KismetDatasource__ListInterfaces *message,
                  void *closure_data);
typedef void (*KismetDatasource__InterfacesReport_Closure)
                 (const KismetDatasource__InterfacesReport *message,
                  void *closure_data);
typedef void (*KismetDatasource__NewSource_Closure)
                 (const KismetDatasource__NewSource *message,
                  void *closure_data);
typedef void (*KismetDatasource__OpenSource_Closure)
                 (const KismetDatasource__OpenSource *message,
                  void *closure_data);
typedef void (*KismetDatasource__OpenSourceReport_Closure)
                 (const KismetDatasource__OpenSourceReport *message,
                  void *closure_data);
typedef void (*KismetDatasource__ProbeSource_Closure)
                 (const KismetDatasource__ProbeSource *message,
                  void *closure_data);
typedef void (*KismetDatasource__ProbeSourceReport_Closure)
                 (const KismetDatasource__ProbeSourceReport *message,
                  void *closure_data);
typedef void (*KismetDatasource__WarningReport_Closure)
                 (const KismetDatasource__WarningReport *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor kismet_datasource__sub_channels__descriptor;
extern const ProtobufCMessageDescriptor kismet_datasource__sub_chanset__descriptor;
extern const ProtobufCMessageDescriptor kismet_datasource__sub_chanhop__descriptor;
extern const ProtobufCMessageDescriptor kismet_datasource__sub_gps__descriptor;
extern const ProtobufCMessageDescriptor kismet_datasource__sub_interface__descriptor;
extern const ProtobufCMessageDescriptor kismet_datasource__sub_packet__descriptor;
extern const ProtobufCMessageDescriptor kismet_datasource__sub_json__descriptor;
extern const ProtobufCMessageDescriptor kismet_datasource__sub_buffer__descriptor;
extern const ProtobufCMessageDescriptor kismet_datasource__sub_signal__descriptor;
extern const ProtobufCMessageDescriptor kismet_datasource__sub_specset__descriptor;
extern const ProtobufCMessageDescriptor kismet_datasource__sub_spectrum__descriptor;
extern const ProtobufCMessageDescriptor kismet_datasource__sub_success__descriptor;
extern const ProtobufCMessageDescriptor kismet_datasource__close_datasource__descriptor;
extern const ProtobufCMessageDescriptor kismet_datasource__configure__descriptor;
extern const ProtobufCMessageDescriptor kismet_datasource__configure_report__descriptor;
extern const ProtobufCMessageDescriptor kismet_datasource__data_report__descriptor;
extern const ProtobufCMessageDescriptor kismet_datasource__error_report__descriptor;
extern const ProtobufCMessageDescriptor kismet_datasource__list_interfaces__descriptor;
extern const ProtobufCMessageDescriptor kismet_datasource__interfaces_report__descriptor;
extern const ProtobufCMessageDescriptor kismet_datasource__new_source__descriptor;
extern const ProtobufCMessageDescriptor kismet_datasource__open_source__descriptor;
extern const ProtobufCMessageDescriptor kismet_datasource__open_source_report__descriptor;
extern const ProtobufCMessageDescriptor kismet_datasource__probe_source__descriptor;
extern const ProtobufCMessageDescriptor kismet_datasource__probe_source_report__descriptor;
extern const ProtobufCMessageDescriptor kismet_datasource__warning_report__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_datasource_2eproto__INCLUDED */
